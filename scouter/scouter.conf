### located in: <git repository>/jenkins-pipeline-library/resources/scouter/conf/scouter.conf

### scouter java agent configuration sample
# obj_name=batch-search-8080
# net_collector_ip=127.0.0.1
# net_collector_tcp_port=6100
# net_collector_udp_port=6100

# scouter agent 가 tomcat 이면 obj_type=tomcat 으로 탐지를 해서 사용한다
# obj_type=tomcat

# obj_type 을 사용자 지정값으로 주면, 스카우터에서 그룹으로 분류된다
# obj_type=tomcat-group-api-test
# obj_name=api-test-local

# obj_host_xxx 는 docker 환경에서 컨테이너 id 가 사용되고
# 일반적으로 host 의 hostname 이 사용된다
# obj_host_name=will-be-container-id-01
# obj_host_name_follow_host_agent=false

# _trace_auto_service_enabled=true
# _trace_auto_service_backstack_enabled=true

trace_http_client_ip_header_key=X-Forwarded-For
# Java agent 설정에서 trace_interservice_enabled=true 로 설정하면 HTTP 로 요청하는 서비스 간 연결 추적이 활성화 된다.
trace_interservice_enabled=true
trace_response_gxid_enabled=true

# 배치 서비스들 감지, myapp.xxx.xxx.xxx.xxxScheduler.xxx 메소드에 Scheduled 어노테이션이 있으면 xlog 출력됨
hook_service_patterns=mycom.*Scheduler.*,myapp.*Scheduler.*

hook_method_access_public_enabled=true
hook_method_access_private_enabled=true
hook_method_access_protected_enabled=true
hook_method_access_none_enabled=true
#hook_method_patterns=mycom.*.*,myapp.*.*
#hook_method_ignore_prefixes=get,set,has,is,toString,builder
#hook_method_exclude_patterns=mycom.*.*Builder,myapp.*.*Builder

hook_spring_async_enabled=true
hook_async_callrunnable_enabled=true
hook_async_thread_pool_executor_enabled=true
#hook_async_callrunnable_scan_package_prefixes=mycom.*.*,myapp.*.*

_hook_thread_name_enabled=true
_hook_coroutine_enabled=true
_hook_coroutine_debugger_hook_enabled=true

profile_http_querystring_enabled=true
profile_http_header_enabled=true
profile_http_parameter_enabled=true
profile_spring_controller_method_parameter_enabled=true

# @ConfigDesc("Profiling the memory usage of each service")
profile_thread_memory_usage_enabled=true

profile_sqlmap_name_enabled=true
profile_connection_open_enabled=true

profile_connection_autocommit_status_enabled=true
profile_method_enabled=true

profile_socket_open_fullstack_enabled=false
profile_connection_open_fullstack_enabled=false

profile_fullstack_service_error_enabled=true
profile_fullstack_apicall_error_enabled=true
profile_fullstack_sql_error_enabled=true
# profile_fullstack_sql_commit_enabled=true
profile_fullstack_hooked_exception_enabled=true

# @ConfigDesc("XLog discard service patterns\nNo XLog data, but apply to TPS and summary.\neg) /user/{userId}<GET>,/device/*")
# @ConfigValueType(ValueType.COMMA_SEPARATED_VALUE)
# xlog_discard_service_patterns=

# @ConfigDesc("XLog fully discard service patterns\nNo XLog data, No apply to TPS and summary.\neg) /user/{userId}<GET>,/device/*")
# @ConfigValueType(ValueType.COMMA_SEPARATED_VALUE)
xlog_fully_discard_service_patterns=/status<GET>,/status,/status/**

#Leave an error message at XLog in case of over fetching. (fetch count)
xlog_error_jdbc_fetch_max=1000000
